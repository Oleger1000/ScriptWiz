import asyncio
import logging
import os

async def generate_weather_card():
    process = await asyncio.create_subprocess_shell(
        "./kek.sh",
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    stdout, stderr = await process.communicate()
    if process.returncode != 0:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {stderr.decode()}")
        return None
    logging.info(stdout.decode())
    return "weather_card.png"

async def send_weather_card(client, chat_id, weather_enabled):
    if not weather_enabled:
        logging.info("–ü–æ–≥–æ–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É.")
        return

    card_path = await generate_weather_card()
    if not card_path or not os.path.exists(card_path):
        logging.warning("–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å –ø–æ–≥–æ–¥–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await client.send_file(chat_id, card_path, caption="üå§ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    logging.info(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å –ø–æ–≥–æ–¥–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {chat_id}!")
