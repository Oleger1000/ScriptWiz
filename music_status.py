import asyncio
import logging
from datetime import datetime, timedelta
from aiohttp import web
import json
from json_state import save_state
from telethon.tl.functions.account import UpdateProfileRequest

STATE_FILE = "music_state.json"

class MusicStatusManager:
    def __init__(self, client):
        self.client = client
        self.current_status = None
        self.last_update = None
        self.is_enabled = True
    
    async def update_music_status(self, track_info):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ"""
        if not self.is_enabled:
            return
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥)
        if (self.last_update and 
            datetime.now() - self.last_update < timedelta(seconds=30) and
            self.current_status == track_info):
            return
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            about = f"üéµ–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:\n {track_info}" if track_info else ""
            
            # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 70 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Telegram)
            about = about[:70]
            
            await self.client(UpdateProfileRequest(about=about))
            
            self.current_status = track_info
            self.last_update = datetime.now()
            
            logging.info(f"üéµ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è: {track_info}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –ö–ê–ö None
music_manager = None

# Web-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
async def handle_music_update(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ"""
    global music_manager
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ music_manager
        if music_manager is None:
            logging.error("‚ùå MusicManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return web.json_response(
                {'status': 'error', 'message': 'Music manager not initialized'}, 
                status=500
            )
        
        data = await request.json()
        track_info = data.get('track', '').strip()
        
        logging.info(f"üéµ –ü–æ–ª—É—á–µ–Ω —Ç—Ä–µ–∫ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {track_info}")
        
        if track_info:
            await music_manager.update_music_status(track_info)
            return web.json_response({'status': 'success'})
        else:
            # –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π —Ç—Ä–µ–∫, –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
            await music_manager.update_music_status(None)
            return web.json_response({'status': 'cleared'})
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return web.json_response({'status': 'error', 'message': str(e)}, status=400)



async def handle_toggle(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–≤–∫–ª/–≤—ã–∫–ª)"""
    global music_manager
    if music_manager is None:
        return web.json_response({'status': 'error', 'message': 'Music manager not initialized'}, status=500)
    
    data = await request.json()
    action = data.get('action', '').lower()
    
    if action == 'enable':
        music_manager.enable()
        return web.json_response({'status': 'enabled'})
    elif action == 'disable':
        music_manager.disable()
        return web.json_response({'status': 'disabled'})
    else:
        return web.json_response({'status': 'error', 'message': 'Unknown action'}, status=400)
    
async def handle_get_state(request):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º—É–∑—ã–∫–∏"""
    global music_manager
    if music_manager is None:
        return web.json_response({'enabled': False})
    return web.json_response({'enabled': music_manager.is_enabled})



async def start_web_server(port=8888):
    """–ó–∞–ø—É—Å–∫ web-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤"""
    app = web.Application()
    app.router.add_post('/music/update', handle_music_update)
    app.router.add_get('/music/state', handle_get_state)
    
    # –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
    async def cors_middleware(app, handler):
        async def middleware_handler(request):
            if request.method == 'OPTIONS':
                response = web.Response()
            else:
                response = await handler(request)
            
            response.headers['Access-Control-Allow-Origin'] = '*'
            response.headers['Access-Control-Allow-Methods'] = 'POST, OPTIONS'
            response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
            return response
        return middleware_handler

    app.middlewares.append(cors_middleware)
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä—Ç—ã
    ports_to_try = [port, 8889, 8890, 8891]
    
    for current_port in ports_to_try:
        try:
            site = web.TCPSite(runner, '0.0.0.0', current_port)
            await site.start()
            logging.info(f"üåê Web-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –º—É–∑—ã–∫–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {current_port}")
            return current_port
        except OSError as e:
            if e.errno == 98:  # Address already in use
                logging.warning(f"‚ö†Ô∏è –ü–æ—Ä—Ç {current_port} –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...")
                continue
            else:
                raise e
    
    logging.error("‚ùå –í—Å–µ –ø–æ—Ä—Ç—ã –∑–∞–Ω—è—Ç—ã, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å web-—Å–µ—Ä–≤–µ—Ä")
    return None



async def disable_with_placeholder(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Å—Ç–∞–≤–∏—Ç —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å"""
        self.is_enabled = False
        save_state(STATE_FILE, False)
        placeholder = "–æ–ª–µ–≥"
        try:
            await self.client(UpdateProfileRequest(about=placeholder))
            self.current_status = placeholder
            logging.info("‚è∏ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—ã–∫–ª—é—á–µ–Ω –∏ –∑–∞–º–µ–Ω—ë–Ω –∑–∞–≥–ª—É—à–∫–æ–π.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≥–ª—É—à–∫–∏: {e}")

def init_music_manager(client):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º—É–∑—ã–∫–∏ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ main)"""
    global music_manager
    music_manager = MusicStatusManager(client)
    logging.info("‚úÖ MusicManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return music_manager


